using UnityEngine.Events;

namespace HiscomProject.Runtime.Scripts.Patterns.MMVCC.Views
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Collections;
    using UnityEngine;

    public class HP_PlayerInvulnerability : MonoBehaviour
    {
        #region Variables

        #region Protected Variables

        [SerializeField][TagSelector] protected string[] enemiesTags;
        [SerializeField] protected float invulnerabilityTime, changeSpriteColorTime;
        [SerializeField] protected SpriteRenderer spriteRenderer;
        [SerializeField] protected UnityEvent eventToExecuteOnDamage;
        
        protected bool isInvulnerable;
        protected List<GameObject> enemies = new();

        #endregion

        #endregion

        #region Methods

        #region Protected Methods
        
        protected virtual void OnDisable()
        {
            isInvulnerable = false;
            spriteRenderer.color = Color.white;
            StopAllCoroutines();
        }
        protected virtual void OnTriggerEnter(Collider other)
        {            
            if (enemiesTags.Any(other.CompareTag))
                enemies.Add(other.gameObject);
        }
        protected virtual void Update()
        {
            if (enemies.Count > 0 && !isInvulnerable)
            {
                isInvulnerable = true;
                StartCoroutine(OnDamageTaken());
                StartCoroutine(ChangeSpriteColor());
                eventToExecuteOnDamage?.Invoke();
            }
            
            enemies.Clear();
        }

        protected IEnumerator OnDamageTaken()
        {
            Physics.IgnoreLayerCollision(10, 10, true);
            yield return new WaitForSeconds(invulnerabilityTime);
            Physics.IgnoreLayerCollision(10, 10, false);

            yield return new WaitForSeconds(0.25f);
            isInvulnerable = false;
        }
        protected IEnumerator ChangeSpriteColor()
        {
            do
            {
                yield return new WaitForSeconds(changeSpriteColorTime);
                spriteRenderer.color = spriteRenderer.color == Color.white ? Color.red : Color.white;
            } while (isInvulnerable);
            spriteRenderer.color = Color.white;
        }

        #endregion

        #endregion
    }
}